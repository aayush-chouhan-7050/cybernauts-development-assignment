# 🚀 Quick Start Guide

Get up and running with the Interactive User Relationship & Hobby Network in 5 minutes!

## 🌐 Try Live Demo First (No Setup Required!)

**The easiest way to see the project:**

- **Frontend**: https://cybernauts-development-assignment.vercel.app/
- **Backend API**: https://cybernauts-backend-qujq.onrender.com/api

**What you can do:**
- ✅ Create and manage users
- ✅ Link users as friends by dragging
- ✅ Drag hobbies onto user nodes
- ✅ See real-time popularity score updates
- ✅ Test delete protection (409 error)
- ✅ Try lazy loading toggle
- ✅ Use undo/redo functionality

**Just visit the URL and start exploring!**

---

## 📋 For Local Development

### Prerequisites (5 minutes)
- ✅ Node.js 18+ installed ([Download](https://nodejs.org/))
- ✅ MongoDB Atlas account ([Free Signup](https://www.mongodb.com/cloud/atlas))
- ✅ Git installed
- ⚠️ Redis (Optional - for bonus features)

---

## 🎯 Option 1: Super Quick Start (5 minutes)

### Step 1: Clone & Install (2 minutes)

```bash
# Clone the repository
git clone <your-repo-url>
cd cybernauts-assignment

# Install backend
cd cybernauts-backend
npm install

# Install frontend (in a new terminal)
cd cybernauts-frontend
npm install
```

### Step 2: Configure Environment (2 minutes)

**Backend (.env):**
```bash
cd cybernauts-backend
cp .env.example .env
```

Edit `.env` file:
```env
PORT=3001
DB_URL=mongodb+srv://username:password@cluster.mongodb.net/cybernauts?retryWrites=true&w=majority
FRONTEND_ORIGIN_URL=http://localhost:5173
```

**Get your MongoDB URL:**
1. Go to [MongoDB Atlas](https://cloud.mongodb.com)
2. Create free cluster (if you don't have one)
3. Click "Connect" → "Connect your application"
4. Copy connection string
5. Replace `<password>` with your password

**Frontend (.env):**
```bash
cd cybernauts-frontend
cp .env.example .env
```

Edit `.env` file:
```env
VITE_API_URL=http://localhost:3001/api
```

### Step 3: Run (1 minute)

**Terminal 1 - Backend:**
```bash
cd cybernauts-backend
npm run dev
```

✅ Wait for: "Server is running on http://localhost:3001"

**Terminal 2 - Frontend:**
```bash
cd cybernauts-frontend
npm run dev
```

✅ Wait for: "Local: http://localhost:5173/"

### Step 4: Test! (30 seconds)

1. Open browser: `http://localhost:5173`
2. Create a user: Alice, age 25, hobbies: "coding, music"
3. Create another: Bob, age 30, hobbies: "coding, sports"
4. Drag from Alice to Bob to link them
5. See the graph update with connected nodes! 🎉

---

## 🎯 Option 2: Full Setup with Testing (10 minutes)

### Complete Installation

```bash
# 1. Clone
git clone <your-repo-url>
cd cybernauts-assignment

# 2. Backend setup
cd cybernauts-backend
npm install
cp .env.example .env
# Edit .env with your MongoDB URL

# 3. Frontend setup
cd ../cybernauts-frontend
npm install
cp .env.example .env
# Edit .env with VITE_API_URL

# 4. Run tests
cd ../cybernauts-backend
npm test

# 5. Start backend
npm run dev

# 6. Start frontend (new terminal)
cd ../cybernauts-frontend
npm run dev
```

---

## 🎯 Option 3: With Redis (Bonus Features)

### Install Redis

**Using Docker (Recommended):**
```bash
docker run -d -p 6379:6379 redis:alpine
```

**macOS:**
```bash
brew install redis
brew services start redis
```

**Ubuntu/Debian:**
```bash
sudo apt install redis-server
sudo systemctl start redis
```

### Configure Backend

Edit `cybernauts-backend/.env`:
```env
PORT=3001
DB_URL=mongodb+srv://...
FRONTEND_ORIGIN_URL=http://localhost:5173

# Enable Redis
REDIS_ENABLED=true
REDIS_URL=redis://localhost:6379
```

### Run with Redis

```bash
cd cybernauts-backend
npm run dev

# You should see:
# ✅ Redis main client connected
# ✅ Redis publisher connected
# ✅ Redis subscriber connected
# 🔴 Redis is ready for state synchronization
```

**Redis Benefits:**
- ✅ Faster API responses (caching)
- ✅ State synchronized across workers
- ✅ Improved performance under load

---

## 🧪 Testing Your Setup

### 1. Test Backend API

```bash
# Health check
curl http://localhost:3001/

# Expected: {"status":"API is running","worker":...}

# Get all users
curl http://localhost:3001/api/users

# Expected: [] (empty array initially)
```

### 2. Test Frontend

1. Open `http://localhost:5173`
2. Should see the graph interface
3. Sidebar on the left with user form
4. Empty graph canvas

### 3. Create Test Data

**Option A: Via UI**
1. Use the sidebar form
2. Create 2-3 users
3. Link them by dragging

**Option B: Via API**
```bash
# Create Alice
curl -X POST http://localhost:3001/api/users \
  -H "Content-Type: application/json" \
  -d '{"username":"Alice","age":25,"hobbies":["coding","music"]}'

# Create Bob
curl -X POST http://localhost:3001/api/users \
  -H "Content-Type: application/json" \
  -d '{"username":"Bob","age":30,"hobbies":["coding","sports"]}'
```

**Option C: Seed Database (for testing with many users)**
```bash
cd cybernauts-backend

# Create 50 test users
npm run seed:small

# Create 200 test users
npm run seed:medium

# Create 500 test users
npm run seed:large
```

---

## 🐛 Troubleshooting

### "Cannot connect to MongoDB"

**Problem:** Backend can't connect to database

**Solution:**
1. Check `DB_URL` in `.env` is correct
2. Verify MongoDB Atlas cluster is running
3. Check IP whitelist includes `0.0.0.0/0`
4. Ensure username/password are correct

**Test connection:**
```bash
mongosh "your_mongodb_url"
```

### "Port 3001 already in use"

**Problem:** Another process is using the port

**Solution:**
```bash
# macOS/Linux
lsof -ti:3001 | xargs kill -9

# Or change port in .env
PORT=3002
```

### "Network Error" in frontend

**Problem:** Frontend can't reach backend

**Solution:**
1. ✅ Check backend is running (`http://localhost:3001`)
2. ✅ Verify `VITE_API_URL` in frontend `.env`
3. ✅ Check browser console for CORS errors
4. ✅ Restart both backend and frontend

### "Module not found" errors

**Problem:** Dependencies not installed

**Solution:**
```bash
# Backend
cd cybernauts-backend
rm -rf node_modules package-lock.json
npm install

# Frontend
cd cybernauts-frontend
rm -rf node_modules package-lock.json
npm install
```

### "VITE_API_URL is not defined"

**Problem:** Environment variable not loading

**Solution:**
1. ✅ Ensure `.env` file exists in `cybernauts-frontend/`
2. ✅ Variable must start with `VITE_`
3. ✅ Restart the dev server after changing `.env`
4. ✅ Check there's no typo in variable name

---

## 📝 Quick Feature Test Checklist

Once running, test these features:

### Basic Operations
- [ ] Create a user (fill form in sidebar)
- [ ] User appears as node on graph
- [ ] Edit user (click node, modify form)
- [ ] See changes reflected immediately

### Relationships
- [ ] Link two users (drag from one node to another)
- [ ] See edge (line) connecting them
- [ ] Popularity score updates
- [ ] Unlink users (delete the edge)

### Hobbies Management
- [ ] Search hobbies in sidebar
- [ ] Drag hobby onto user node
- [ ] Hobby added to user
- [ ] Popularity score recalculates

### Delete Protection (As Per Assignment)
- [ ] Try to delete user with friends
- [ ] See 409 error message toast
- [ ] Unlink user from all friends
- [ ] Delete succeeds now

### Advanced Features
- [ ] Use undo/redo buttons
- [ ] Toggle lazy loading
- [ ] Click "Load More" (if >50 users)
- [ ] Watch node color change (score crosses 5)

---

## 🎯 Next Steps

### Run Tests
```bash
cd cybernauts-backend
npm test

# Or run specific suites
npm run test:unit          # Business logic (25 tests)
npm run test:redis         # Redis features (19 tests)
npm run test:integration   # End-to-end (11 tests)

# Generate coverage report
npm run test:coverage
open coverage/lcov-report/index.html
```

### Try Advanced Features

**1. Database Seeding:**
```bash
cd cybernauts-backend
npm run seed:medium  # Creates 200 users with relationships
```

**2. Lazy Loading:**
- Enable "Lazy Loading" toggle in UI
- Click "Load More" to load additional users
- Test performance with large datasets

**3. Redis Caching:**
- Enable Redis in `.env`
- Compare response times with/without cache
- Monitor cache hits in terminal logs

### Read Documentation

- **[README.md](./README.md)** - Complete overview
- **[API_DOCUMENTATION.md](./API_DOCUMENTATION.md)** - API reference
- **[TESTING_GUIDE.md](./cybernauts-backend/TESTING_GUIDE.md)** - Testing details
- **[DEPLOYMENT.md](./DEPLOYMENT.md)** - Deploy your own instance
- **[REDIS.md](./cybernauts-backend/REDIS.md)** - Redis setup guide

---

## 💡 Quick Tips

### Performance Tips
- ✅ Use lazy loading for >100 users
- ✅ Enable Redis for better caching
- ✅ Debouncing is automatic (300ms)

### Development Tips
- ✅ Use nodemon (auto-restart on changes)
- ✅ Check browser DevTools console
- ✅ Monitor backend terminal for logs
- ✅ Test API with Postman collection

### Testing Tips
- ✅ Start with small dataset (10 users)
- ✅ Test delete protection first
- ✅ Try undo/redo with node moves
- ✅ Check popularity score calculations

---

## 🎥 Watch the Demo

[Screen Recording Link - To be added]

The recording demonstrates:
- ✅ Full application walkthrough
- ✅ All features in action
- ✅ Code structure explanation
- ✅ Bonus features showcase

---

## 🆘 Still Having Issues?

### Check These First:
1. ✅ Node.js version: `node --version` (should be 18+)
2. ✅ npm version: `npm --version`
3. ✅ MongoDB connection: Test with mongosh
4. ✅ Port availability: `lsof -i :3001`
5. ✅ Environment files: `.env` exists in both folders

### Common Solutions:
```bash
# Clean install
rm -rf node_modules package-lock.json
npm install

# Clear cache
npm cache clean --force

# Update npm
npm install -g npm@latest
```

### Get Help:
- 📖 Review [README.md](./README.md)
- 📖 Check [TESTING_GUIDE.md](./cybernauts-backend/TESTING_GUIDE.md)
- 📖 See [DEPLOYMENT.md](./DEPLOYMENT.md)

---

## ✅ Success Checklist

You're ready when you can:

- [ ] Backend starts without errors
- [ ] Frontend loads at `http://localhost:5173`
- [ ] Can create users via UI
- [ ] Can link users by dragging
- [ ] Can drag hobbies onto nodes
- [ ] See popularity scores update
- [ ] Delete protection works (409 error)
- [ ] Tests pass: `npm test`

**Congratulations! 🎉 You're all set up!**

---

## 🚀 What's Next?

### For Development:
1. Explore the code structure
2. Run the test suite
3. Try modifying features
4. Read the documentation

### For Demo:
1. Seed database with test data
2. Test all features
3. Record screen demo
4. Deploy to production

### For Learning:
1. Study the React Flow implementation
2. Understand Redux state management
3. Review the popularity score algorithm
4. Learn about Redis caching

---

**Total Setup Time:** 5-10 minutes  
**Difficulty:** Easy  
**Prerequisites:** Node.js, MongoDB account